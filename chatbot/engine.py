# Vietnamese Rule-based chatbot engine
import re
from .rules import CHATBOT_RULES, DEFAULT_RESPONSE, GREETING_KEYWORDS, GREETING_RESPONSE

class VietnameseLibraryChatbot:
    def __init__(self):
        self.rules = CHATBOT_RULES
        self.conversation_history = []
    
    def preprocess_input(self, user_input):
        """L√†m s·∫°ch v√† chu·∫©n h√≥a ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng"""
        # Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
        processed = user_input.lower().strip()
        # Lo·∫°i b·ªè d·∫•u c√¢u tr·ª´ d·∫•u nh√°y
        processed = re.sub(r"[^\w\s']", "", processed)
        return processed
    
    def remove_vietnamese_accents(self, text):
        """Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát ƒë·ªÉ so kh·ªõp linh ho·∫°t h∆°n"""
        # B·∫£n ƒë·ªì chuy·ªÉn ƒë·ªïi t·ª´ c√≥ d·∫•u sang kh√¥ng d·∫•u
        vietnamese_map = {
            '√°': 'a', '√†': 'a', '·∫£': 'a', '√£': 'a', '·∫°': 'a',
            '·∫•': 'a', '·∫ß': 'a', '·∫©': 'a', '·∫´': 'a', '·∫≠': 'a',
            '·∫Ø': 'a', '·∫±': 'a', '·∫≥': 'a', '·∫µ': 'a', '·∫∑': 'a',
            '√©': 'e', '√®': 'e', '·∫ª': 'e', '·∫Ω': 'e', '·∫π': 'e',
            '·∫ø': 'e', '·ªÅ': 'e', '·ªÉ': 'e', '·ªÖ': 'e', '·ªá': 'e',
            '√≠': 'i', '√¨': 'i', '·ªâ': 'i', 'ƒ©': 'i', '·ªã': 'i',
            '√≥': 'o', '√≤': 'o', '·ªè': 'o', '√µ': 'o', '·ªç': 'o',
            '·ªë': 'o', '·ªì': 'o', '·ªï': 'o', '·ªó': 'o', '·ªô': 'o',
            '·ªõ': 'o', '·ªù': 'o', '·ªü': 'o', '·ª°': 'o', '·ª£': 'o',
            '√∫': 'u', '√π': 'u', '·ªß': 'u', '≈©': 'u', '·ª•': 'u',
            '·ª©': 'u', '·ª´': 'u', '·ª≠': 'u', '·ªØ': 'u', '·ª±': 'u',
            '√Ω': 'y', '·ª≥': 'y', '·ª∑': 'y', '·ªπ': 'y', '·ªµ': 'y',
            'ƒë': 'd'
        }
        
        result = ""
        for char in text:
            result += vietnamese_map.get(char, char)
        return result
    
    def check_greeting(self, user_input):
        """Ki·ªÉm tra xem ƒë·∫ßu v√†o c√≥ ph·∫£i l·ªùi ch√†o kh√¥ng"""
        processed_input = self.preprocess_input(user_input)
        words = processed_input.split()
        
        for word in words:
            for greeting in GREETING_KEYWORDS:
                if word == greeting.lower() or self.remove_vietnamese_accents(word) == self.remove_vietnamese_accents(greeting.lower()):
                    return True
        return False
    
    def find_matching_rule(self, user_input):
        """T√¨m quy t·∫Øc kh·ªõp t·ªët nh·∫•t d·ª±a tr√™n s·ª± xu·∫•t hi·ªán c·ªßa t·ª´ kh√≥a"""
        processed_input = self.preprocess_input(user_input)
        processed_no_accent = self.remove_vietnamese_accents(processed_input)
        
        # Ki·ªÉm tra l·ªùi ch√†o tr∆∞·ªõc
        if self.check_greeting(user_input):
            return GREETING_RESPONSE
        
        # T√≠nh ƒëi·ªÉm cho m·ªói quy t·∫Øc d·ª±a tr√™n t·ª´ kh√≥a kh·ªõp
        rule_scores = []
        
        for rule in self.rules:
            score = 0
            matched_keywords = []
            
            for keyword in rule["keywords"]:
                keyword_lower = keyword.lower()
                keyword_no_accent = self.remove_vietnamese_accents(keyword_lower)
                
                # Ki·ªÉm tra t·ª´ kh√≥a xu·∫•t hi·ªán trong ƒë·∫ßu v√†o
                if keyword_lower in processed_input or keyword_no_accent in processed_no_accent:
                    score += 1
                    matched_keywords.append(keyword)
                    
                # Ki·ªÉm tra kh·ªõp m·ªôt ph·∫ßn (ƒë·ªÉ x·ª≠ l√Ω l·ªói ch√≠nh t·∫£)
                words = processed_input.split()
                words_no_accent = processed_no_accent.split()
                
                for word, word_no_accent in zip(words, words_no_accent):
                    if len(word) > 2 and len(keyword_lower) > 2:
                        # Ki·ªÉm tra t∆∞∆°ng t·ª± ƒë∆°n gi·∫£n cho l·ªói ch√≠nh t·∫£
                        if (self.simple_similarity(word, keyword_lower) > 0.7 or 
                            self.simple_similarity(word_no_accent, keyword_no_accent) > 0.7):
                            score += 0.5
                            if keyword not in matched_keywords:
                                matched_keywords.append(keyword)
            
            if score > 0:
                rule_scores.append({
                    "rule": rule,
                    "score": score,
                    "matched_keywords": matched_keywords
                })
        
        # Tr·∫£ v·ªÅ quy t·∫Øc c√≥ ƒëi·ªÉm cao nh·∫•t
        if rule_scores:
            best_rule = max(rule_scores, key=lambda x: x["score"])
            return best_rule["rule"]["response"]
        
        return DEFAULT_RESPONSE
    
    def simple_similarity(self, word1, word2):
        """T√≠nh to√°n ƒë·ªô t∆∞∆°ng t·ª± ƒë∆°n gi·∫£n gi·ªØa hai t·ª´"""
        if len(word1) == 0 or len(word2) == 0:
            return 0
        
        # ƒê·∫øm k√Ω t·ª± chung
        common_chars = 0
        for char in word1:
            if char in word2:
                common_chars += 1
        
        # ƒêi·ªÉm t∆∞∆°ng t·ª± ƒë∆°n gi·∫£n
        similarity = common_chars / max(len(word1), len(word2))
        return similarity
    
    def get_response(self, user_input):
        """L·∫•y ph·∫£n h·ªìi chatbot cho ƒë·∫ßu v√†o ng∆∞·ªùi d√πng"""
        if not user_input or not user_input.strip():
            return "Vui l√≤ng h·ªèi t√¥i m·ªôt c√¢u h·ªèi v·ªÅ th∆∞ vi·ªán!"
        
        # L∆∞u tr·ªØ cu·ªôc tr√≤ chuy·ªán
        self.conversation_history.append({"user": user_input, "timestamp": None})
        
        # T√¨m quy t·∫Øc kh·ªõp v√† l·∫•y ph·∫£n h·ªìi
        response = self.find_matching_rule(user_input)
        
        # L∆∞u tr·ªØ ph·∫£n h·ªìi bot
        self.conversation_history.append({"bot": response, "timestamp": None})
        
        return response
    
    def get_help_message(self):
        """Tr·∫£ v·ªÅ th√¥ng ƒëi·ªáp tr·ª£ gi√∫p v·ªõi c√°c ch·ªß ƒë·ªÅ c√≥ s·∫µn"""
        help_text = """
        üÜò T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:
        ‚Ä¢ Gi·ªù m·ªü c·ª≠a v√† l·ªãch ho·∫°t ƒë·ªông th∆∞ vi·ªán
        ‚Ä¢ T√¨m ki·∫øm v√† tra c·ª©u s√°ch
        ‚Ä¢ ƒê·∫∑t ph√≤ng h·ªçc
        ‚Ä¢ Truy c·∫≠p m√°y t√≠nh v√† m√°y in
        ‚Ä¢ Ph√≠ v√† ti·ªÅn ph·∫°t th∆∞ vi·ªán
        ‚Ä¢ V·ªã tr√≠ v√† ƒë∆∞·ªùng ƒëi
        ‚Ä¢ Th√¥ng tin li√™n h·ªá
        ‚Ä¢ Ch√≠nh s√°ch th∆∞ vi·ªán
        ‚Ä¢ Th√¥ng tin t√†i kho·∫£n v√† th·∫ª
        ‚Ä¢ C∆° s·ªü d·ªØ li·ªáu v√† t√†i nguy√™n nghi√™n c·ª©u
        
        H√£y h·ªèi t√¥i c√¢u h·ªèi v·ªÅ b·∫•t k·ª≥ ch·ªß ƒë·ªÅ n√†o trong s·ªë n√†y!
        """
        return help_text.strip()

# T·∫°o instance chatbot to√†n c·ª•c
chatbot = VietnameseLibraryChatbot()
